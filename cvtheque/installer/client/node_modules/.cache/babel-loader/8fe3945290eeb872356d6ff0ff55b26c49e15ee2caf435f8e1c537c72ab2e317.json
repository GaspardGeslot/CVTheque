{"ast":null,"code":"import { required, validRange, shouldNotExceedCharLength, shouldNotContainSpecialChars } from '@/core/util/validation/rules';\nimport { APIService } from '@/core/util/services/api.service';\nimport { navigate } from '@/core/util/helper/navigation.ts';\nimport tooltipDirective from '@/core/util/directives/tooltip';\nimport { OxdRadioInput } from '@ohrm/oxd';\nexport default {\n  name: 'DatabaseConfigScreen',\n  components: {\n    'oxd-radio-input': OxdRadioInput\n  },\n  directives: {\n    tooltip: tooltipDirective\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/installer/api/database-config');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      rules: {\n        dbHost: [required],\n        dbPort: [required, validRange(5, 0, 65535)],\n        dbName: [required, shouldNotExceedCharLength(64), shouldNotContainSpecialChars('Database name should not contain special characters')],\n        dbUser: [required],\n        ohrmDbUser: [value => this.disableOHRMDBfield || required(value)]\n      },\n      isLoading: false,\n      database: {\n        dbType: null,\n        dbHost: null,\n        dbPort: null,\n        dbUser: null,\n        dbName: null,\n        dbPassword: null,\n        ohrmDbUser: null,\n        ohrmDbPassword: null,\n        useSameDbUserForOrangeHRM: true,\n        enableDataEncryption: false\n      },\n      errorMessage: ''\n    };\n  },\n  computed: {\n    isNewDB() {\n      return this.database.dbType === 'new';\n    },\n    disableOHRMDBfield() {\n      if (!this.isNewDB) return false;\n      return this.database.useSameDbUserForOrangeHRM;\n    }\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      const {\n        data\n      } = response.data;\n      this.database = {\n        ...data,\n        dbPassword: null,\n        ohrmDbPassword: null\n      };\n      if (!this.database.dbType) {\n        this.database.dbType = 'new';\n      }\n      if (!this.database.dbPort) {\n        this.database.dbPort = 3306;\n      }\n      this.isLoading = false;\n    });\n  },\n  methods: {\n    onSubmit() {\n      this.isLoading = true;\n      this.errorMessage = '';\n      const payload = {\n        ...this.database\n      };\n      this.http.create({\n        ...payload,\n        ...(payload.dbType === 'existing' && {\n          dbUser: payload.ohrmDbUser,\n          dbPassword: payload.ohrmDbPassword,\n          ohrmDbUser: undefined,\n          ohrmDbPassword: undefined,\n          useSameDbUserForOrangeHRM: undefined\n        }),\n        ...(payload.useSameDbUserForOrangeHRM && {\n          ohrmDbUser: undefined,\n          ohrmDbPassword: undefined\n        })\n      }).then(() => {\n        navigate('/installer/system-check');\n      }).catch(({\n        response\n      }) => {\n        const {\n          error\n        } = response.data;\n        this.errorMessage = error?.message ?? error;\n        this.isLoading = false;\n      });\n    },\n    navigateUrl() {\n      navigate('/installer/licence-acceptance');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
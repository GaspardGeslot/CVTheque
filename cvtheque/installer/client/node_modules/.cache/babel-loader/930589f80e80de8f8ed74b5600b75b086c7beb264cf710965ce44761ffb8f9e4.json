{"ast":null,"code":"/**\n* vue v3.4.19\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nimport * as runtimeDom from '@vue/runtime-dom';\nimport { initCustomFormatter, registerRuntimeCompiler, warn } from '@vue/runtime-dom';\nexport * from '@vue/runtime-dom';\nimport { compile } from '@vue/compiler-dom';\nimport { isString, NOOP, extend, generateCodeFrame, EMPTY_OBJ } from '@vue/shared';\nfunction initDev() {\n  {\n    initCustomFormatter();\n  }\n}\nif (!!(process.env.NODE_ENV !== \"production\")) {\n  initDev();\n}\nconst compileCache = /* @__PURE__ */new WeakMap();\nfunction getCache(options) {\n  let c = compileCache.get(options != null ? options : EMPTY_OBJ);\n  if (!c) {\n    c = /* @__PURE__ */Object.create(null);\n    compileCache.set(options != null ? options : EMPTY_OBJ, c);\n  }\n  return c;\n}\nfunction compileToFunction(template, options) {\n  if (!isString(template)) {\n    if (template.nodeType) {\n      template = template.innerHTML;\n    } else {\n      !!(process.env.NODE_ENV !== \"production\") && warn(`invalid template option: `, template);\n      return NOOP;\n    }\n  }\n  const key = template;\n  const cache = getCache(options);\n  const cached = cache[key];\n  if (cached) {\n    return cached;\n  }\n  if (template[0] === \"#\") {\n    const el = document.querySelector(template);\n    if (!!(process.env.NODE_ENV !== \"production\") && !el) {\n      warn(`Template element not found or is empty: ${template}`);\n    }\n    template = el ? el.innerHTML : ``;\n  }\n  const opts = extend({\n    hoistStatic: true,\n    onError: !!(process.env.NODE_ENV !== \"production\") ? onError : void 0,\n    onWarn: !!(process.env.NODE_ENV !== \"production\") ? e => onError(e, true) : NOOP\n  }, options);\n  if (!opts.isCustomElement && typeof customElements !== \"undefined\") {\n    opts.isCustomElement = tag => !!customElements.get(tag);\n  }\n  const {\n    code\n  } = compile(template, opts);\n  function onError(err, asWarning = false) {\n    const message = asWarning ? err.message : `Template compilation error: ${err.message}`;\n    const codeFrame = err.loc && generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\n    warn(codeFrame ? `${message}\n${codeFrame}` : message);\n  }\n  const render = new Function(\"Vue\", code)(runtimeDom);\n  render._rc = true;\n  return cache[key] = render;\n}\nregisterRuntimeCompiler(compileToFunction);\nexport { compileToFunction as compile };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
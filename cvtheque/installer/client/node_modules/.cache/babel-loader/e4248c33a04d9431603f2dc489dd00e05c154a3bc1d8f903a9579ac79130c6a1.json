{"ast":null,"code":"import { required, validEmailFormat, validPhoneNumberFormat, shouldNotExceedCharLength, shouldNotLessThanCharLength } from '@/core/util/validation/rules';\nimport { navigate } from '@/core/util/helper/navigation';\nimport { checkPassword } from '@/core/util/helper/password';\nimport { APIService } from '@/core/util/services/api.service';\nimport { OxdIcon } from '@ohrm/oxd';\nexport default {\n  name: 'AdminUserCreation',\n  components: {\n    'oxd-icon': OxdIcon\n  },\n  setup() {\n    const http = new APIService(window.appGlobal.baseUrl, '/installer/api/admin-user');\n    return {\n      http\n    };\n  },\n  data() {\n    return {\n      isLoading: false,\n      adminUser: {\n        firstName: null,\n        lastName: null,\n        email: null,\n        contact: null,\n        username: null,\n        password: '',\n        confirmPassword: '',\n        registrationConsent: true\n      },\n      rules: {\n        firstName: [required, shouldNotExceedCharLength(30)],\n        lastName: [required, shouldNotExceedCharLength(30)],\n        email: [required, shouldNotExceedCharLength(50), validEmailFormat],\n        contact: [shouldNotExceedCharLength(25), validPhoneNumberFormat],\n        username: [required, shouldNotExceedCharLength(40), shouldNotLessThanCharLength(5)],\n        password: [required, shouldNotExceedCharLength(64), checkPassword],\n        passwordConfirm: [required, shouldNotExceedCharLength(64), v => !!v && v === this.adminUser.password || 'Passwords do not match']\n      }\n    };\n  },\n  beforeMount() {\n    this.isLoading = true;\n    this.http.getAll().then(response => {\n      const {\n        data\n      } = response.data;\n      this.adminUser = {\n        ...this.adminUser,\n        ...data\n      };\n    });\n    this.isLoading = false;\n  },\n  methods: {\n    onSubmit() {\n      this.isLoading = true;\n      this.http.create({\n        firstName: this.adminUser.firstName,\n        lastName: this.adminUser.lastName,\n        email: this.adminUser.email,\n        contact: this.adminUser.contact,\n        username: this.adminUser.username,\n        password: this.adminUser.password,\n        registrationConsent: this.adminUser.registrationConsent\n      }).then(() => {\n        navigate('/installer/confirmation');\n      });\n    },\n    navigateUrl() {\n      navigate('/installer/instance-creation');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*!\n * Built by Revolist\n */\nimport { a as getItemByPosition, g as getItemByIndex } from './dimension.helpers.js';\n\n/** Calculate cell based on x, y position */\nfunction getCurrentCell({\n  x,\n  y\n}, {\n  el,\n  rows,\n  cols\n}) {\n  const {\n    top,\n    left,\n    height,\n    width\n  } = el.getBoundingClientRect();\n  let cellY = y - top;\n  // limit to element height\n  if (cellY >= height) {\n    cellY = height - 1;\n  }\n  let cellX = x - left;\n  // limit to element width\n  if (cellX >= width) {\n    cellX = width - 1;\n  }\n  const rgRow = getItemByPosition(rows, cellY);\n  const rgCol = getItemByPosition(cols, cellX);\n  // before first\n  if (rgCol.itemIndex < 0) {\n    rgCol.itemIndex = 0;\n  }\n  // before first\n  if (rgRow.itemIndex < 0) {\n    rgRow.itemIndex = 0;\n  }\n  return {\n    x: rgCol.itemIndex,\n    y: rgRow.itemIndex\n  };\n}\nfunction getCoordinate(range, focus, changes, isMulti = false) {\n  const updateCoordinate = c => {\n    const start = {\n      x: range.x,\n      y: range.y\n    };\n    const end = isMulti ? {\n      x: range.x1,\n      y: range.y1\n    } : start;\n    const point = end[c] > focus[c] ? end : start;\n    point[c] += changes[c];\n    return {\n      start,\n      end\n    };\n  };\n  if (changes.x) {\n    return updateCoordinate('x');\n  }\n  if (changes.y) {\n    return updateCoordinate('y');\n  }\n  return null;\n}\n/** check if out of range */\nfunction isAfterLast({\n  x,\n  y\n}, {\n  lastCell\n}) {\n  return x >= lastCell.x || y >= lastCell.y;\n}\n/** check if out of range */\nfunction isBeforeFirst({\n  x,\n  y\n}) {\n  return x < 0 || y < 0;\n}\n/** Compare cells, only 1 coordinate difference is possible */\nfunction getDirectionCoordinate(initial, last) {\n  const c = ['x', 'y'];\n  for (let k of c) {\n    if (initial[k] !== last[k]) {\n      return {\n        [k]: 1\n      };\n    }\n  }\n  return null;\n}\nfunction getLargestAxis(initial, last) {\n  const cell = {};\n  const c = ['x', 'y'];\n  for (let k of c) {\n    cell[k] = Math.abs(initial[k] - last[k]);\n  }\n  if (cell.x > cell.y) {\n    return {\n      x: 1\n    };\n  }\n  if (cell.y > cell.x) {\n    return {\n      y: 1\n    };\n  }\n  return null;\n}\nfunction styleByCellProps(styles) {\n  return {\n    left: `${styles.left}px`,\n    top: `${styles.top}px`,\n    width: `${styles.width}px`,\n    height: `${styles.height}px`\n  };\n}\nfunction getCell({\n  x,\n  y,\n  x1,\n  y1\n}, dimensionRow, dimensionCol) {\n  const top = getItemByIndex(dimensionRow, y).start;\n  const left = getItemByIndex(dimensionCol, x).start;\n  const bottom = getItemByIndex(dimensionRow, y1).end;\n  const right = getItemByIndex(dimensionCol, x1).end;\n  return {\n    left,\n    right,\n    top,\n    bottom,\n    width: right - left,\n    height: bottom - top\n  };\n}\nfunction getElStyle(range, dimensionRow, dimensionCol) {\n  const styles = getCell(range, dimensionRow, dimensionCol);\n  return styleByCellProps(styles);\n}\nexport { getCoordinate as a, isBeforeFirst as b, getCell as c, getCurrentCell as d, getDirectionCoordinate as e, getLargestAxis as f, getElStyle as g, isAfterLast as i };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { onBeforeMount, ref, computed } from 'vue';\nimport { APIService } from '@/core/util/services/api.service';\nimport InstallerTasks from '@/components/InstallerTasks.vue';\nimport useBeforeUnload from '@/core/util/composable/useBeforeUnload';\nimport useUpgrader from '@/core/util/composable/useUpgrader';\nimport { navigate } from '@/core/util/helper/navigation.ts';\nimport useProgress from '@/core/util/composable/useProgress';\nimport { OxdProgressbar } from '@ohrm/oxd';\nexport default {\n  name: 'UpgradeScreen',\n  components: {\n    'oxd-progress': OxdProgressbar,\n    'installer-tasks': InstallerTasks\n  },\n  setup() {\n    const errorText = ref(null);\n    const {\n      progress,\n      start,\n      stop,\n      end\n    } = useProgress();\n    const {\n      runAllMigrations,\n      createConfigFiles,\n      preMigrationCheck\n    } = useUpgrader(new APIService(window.appGlobal.baseUrl, ''));\n    const tasks = ref([{\n      name: 'Checking database permissions',\n      state: 0,\n      task: preMigrationCheck\n    }, {\n      name: 'Applying database changes',\n      state: 0,\n      task: runAllMigrations\n    }, {\n      name: 'Creating configuration files',\n      state: 0,\n      task: createConfigFiles\n    }]);\n    onBeforeMount(async () => {\n      start();\n      for (let index = 0; index < tasks.value.length; index++) {\n        try {\n          tasks.value[index].state = 1;\n          await tasks.value[index].task();\n          tasks.value[index].state = 2;\n        } catch (error) {\n          if (error?.message) {\n            errorText.value = error?.message;\n          }\n          tasks.value[index].state = 3;\n          stop();\n          break;\n        }\n        if (index === tasks.value.length - 1) end();\n      }\n    });\n    const onClickNext = () => {\n      navigate('/upgrader/complete');\n    };\n    const progressText = computed(() => {\n      return `${Math.floor(progress.value)}%`;\n    });\n    const taskFailed = computed(() => {\n      return tasks.value.findIndex(task => task.state === 3) > -1;\n    });\n    const errorMessage = computed(() => taskFailed.value ? errorText.value ?? 'Upgrading has failed' : null);\n    const progressType = computed(() => {\n      return !taskFailed.value ? 'secondary' : 'error';\n    });\n    const overrideUnload = computed(() => {\n      return taskFailed.value || progress.value === 100;\n    });\n    useBeforeUnload(overrideUnload);\n    return {\n      tasks,\n      progress,\n      taskFailed,\n      progressText,\n      progressType,\n      errorMessage,\n      onClickNext\n    };\n  },\n  data() {\n    return {\n      faqUrl: 'https://starterhelp.orangehrm.com/hc/en-us/categories/360002856800-FAQs'\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
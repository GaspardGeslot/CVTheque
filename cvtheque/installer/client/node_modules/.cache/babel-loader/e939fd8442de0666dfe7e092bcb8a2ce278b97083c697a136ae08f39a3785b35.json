{"ast":null,"code":"/*!\n * Built by Revolist\n */\n/* Generate range on size\n */\n// (arr1[index1] < arr2[index2])\nfunction simpleCompare(el1, el2) {\n  return el1 < el2;\n}\nfunction mergeSortedArray(arr1, arr2, compareFn = simpleCompare) {\n  const merged = [];\n  let index1 = 0;\n  let index2 = 0;\n  let current = 0;\n  while (current < arr1.length + arr2.length) {\n    let isArr1Depleted = index1 >= arr1.length;\n    let isArr2Depleted = index2 >= arr2.length;\n    if (!isArr1Depleted && (isArr2Depleted || compareFn(arr1[index1], arr2[index2]))) {\n      merged[current] = arr1[index1];\n      index1++;\n    } else {\n      merged[current] = arr2[index2];\n      index2++;\n    }\n    current++;\n  }\n  return merged;\n}\n/* Calculate system scrollbar width */\nfunction getScrollbarWidth(doc) {\n  // Creating invisible container\n  const outer = doc.createElement('div');\n  const styles = outer.style;\n  styles.visibility = 'hidden';\n  styles.overflow = 'scroll'; // forcing scrollbar to appear\n  styles.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n  doc.body.appendChild(outer);\n  // Creating inner element and placing it in the container\n  const inner = doc.createElement('div');\n  outer.appendChild(inner);\n  // Calculating difference between container's full width and the child width\n  const scrollbarWidth = outer.offsetWidth - inner.offsetWidth;\n  // Removing temporary elements from the DOM\n  outer.parentNode.removeChild(outer);\n  return scrollbarWidth;\n}\n/* Scale a value between 2 ranges\n *\n * Sample:\n * // 55 from a 0-100 range to a 0-1000 range (Ranges don't have to be positive)\n * const n = scaleValue(55, [0,100], [0,1000]);\n *\n * Ranges of two values\n * @from\n * @to\n *\n * ~~ return value does the equivalent of Math.floor but faster.\n */\nfunction scaleValue(value, from, to) {\n  return (to[1] - to[0]) * (value - from[0]) / (from[1] - from[0]) + to[0];\n}\nasync function timeout(delay = 0) {\n  await new Promise(r => {\n    setTimeout(() => r(), delay);\n  });\n}\nexport { getScrollbarWidth as g, mergeSortedArray as m, scaleValue as s, timeout as t };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/*!\n * Built by Revolist\n */\nimport { proxyCustomElement, HTMLElement, createEvent } from '@stencil/core/internal/client';\nimport { d as debounce_1 } from './debounce.js';\nimport { h as setItems } from './data.store.js';\nimport { g as DRAGG_TEXT } from './consts.js';\nimport { a as getItemByPosition } from './dimension.helpers.js';\nclass RowOrderService {\n  constructor(config) {\n    this.config = config;\n    this.currentCell = null;\n    this.previousRow = null;\n  }\n  /** Drag finished, calculate and apply changes */\n  endOrder(e, data) {\n    if (this.currentCell === null) {\n      return;\n    }\n    const newRow = this.getCell(e, data);\n    // if position changed\n    if (newRow.y !== this.currentCell.y) {\n      // rgRow dragged out table\n      if (newRow.y < 0) {\n        newRow.y = 0;\n      }\n      // rgRow dragged to the top\n      else if (newRow.y < this.currentCell.y) {\n        newRow.y++;\n      }\n      this.config.positionChanged(this.currentCell.y, newRow.y);\n    }\n    this.clear();\n  }\n  /** Drag started, reserve initial cell for farther use */\n  startOrder(e, data) {\n    this.currentCell = this.getCell(e, data);\n    return this.currentCell;\n  }\n  move(y, data) {\n    const rgRow = this.getRow(y, data);\n    // if rgRow same as previous or below range (-1 = 0) do nothing\n    if (this.previousRow === rgRow.itemIndex || rgRow.itemIndex < -1) {\n      return null;\n    }\n    this.previousRow = rgRow.itemIndex;\n    return rgRow;\n  }\n  /** Drag stopped, probably cursor outside of document area */\n  clear() {\n    this.currentCell = null;\n    this.previousRow = null;\n  }\n  /** Calculate cell based on x, y position */\n  getRow(y, {\n    el,\n    rows\n  }) {\n    const {\n      top\n    } = el.getBoundingClientRect();\n    const topRelative = y - top;\n    const rgRow = getItemByPosition(rows, topRelative);\n    const absolutePosition = {\n      itemIndex: rgRow.itemIndex,\n      start: rgRow.start + top,\n      end: rgRow.end + top\n    };\n    return absolutePosition;\n  }\n  /** Calculate cell based on x, y position */\n  getCell({\n    x,\n    y\n  }, {\n    el,\n    rows,\n    cols\n  }) {\n    const {\n      top,\n      left\n    } = el.getBoundingClientRect();\n    const topRelative = y - top;\n    const leftRelative = x - left;\n    const rgRow = getItemByPosition(rows, topRelative);\n    const rgCol = getItemByPosition(cols, leftRelative);\n    return {\n      x: rgCol.itemIndex,\n      y: rgRow.itemIndex\n    };\n  }\n}\nconst OrderEditor = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.internalRowDragStart = createEvent(this, \"internalRowDragStart\", 7);\n    this.internalRowDragEnd = createEvent(this, \"internalRowDragEnd\", 7);\n    this.internalRowDrag = createEvent(this, \"internalRowDrag\", 7);\n    this.internalRowMouseMove = createEvent(this, \"internalRowMouseMove\", 7);\n    this.initialRowDropped = createEvent(this, \"initialRowDropped\", 7);\n    this.rowMoveFunc = debounce_1(y => {\n      const rgRow = this.rowOrderService.move(y, this.getData());\n      if (rgRow !== null) {\n        this.internalRowDrag.emit(rgRow);\n      }\n    }, 5);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners\n  //\n  // --------------------------------------------------------------------------\n  onMouseOut() {\n    this.clearOrder();\n  }\n  /** Action finished inside of the document */\n  onMouseUp(e) {\n    this.endOrder(e);\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  async dragStart(e) {\n    e.preventDefault();\n    // extra check if previous ended\n    if (this.moveFunc) {\n      this.clearOrder();\n    }\n    const data = this.getData();\n    const cell = this.rowOrderService.startOrder(e, data);\n    const pos = this.rowOrderService.getRow(e.y, data);\n    const dragStartEvent = this.internalRowDragStart.emit({\n      cell,\n      text: DRAGG_TEXT,\n      pos,\n      event: e\n    });\n    if (dragStartEvent.defaultPrevented) {\n      return;\n    }\n    this.moveFunc = e => this.move(e);\n    document.addEventListener('mousemove', this.moveFunc);\n  }\n  async endOrder(e) {\n    this.rowOrderService.endOrder(e, this.getData());\n    this.clearOrder();\n  }\n  async clearOrder() {\n    this.rowOrderService.clear();\n    document.removeEventListener('mousemove', this.moveFunc);\n    this.moveFunc = null;\n    this.internalRowDragEnd.emit();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Component methods\n  //\n  // --------------------------------------------------------------------------\n  move({\n    x,\n    y\n  }) {\n    this.internalRowMouseMove.emit({\n      x,\n      y\n    });\n    this.rowMoveFunc(y);\n  }\n  connectedCallback() {\n    this.rowOrderService = new RowOrderService({\n      positionChanged: (f, t) => this.onPositionChanged(f, t)\n    });\n  }\n  onPositionChanged(from, to) {\n    const dropEvent = this.initialRowDropped.emit({\n      from,\n      to\n    });\n    if (dropEvent.defaultPrevented) {\n      return;\n    }\n    const items = [...this.dataStore.get('items')];\n    const toMove = items.splice(from, 1);\n    items.splice(to, 0, ...toMove);\n    setItems(this.dataStore, items);\n  }\n  getData() {\n    return {\n      el: this.parent,\n      rows: this.dimensionRow.state,\n      cols: this.dimensionCol.state\n    };\n  }\n}, [0, \"revogr-order-editor\", {\n  \"parent\": [16],\n  \"dimensionRow\": [16],\n  \"dimensionCol\": [16],\n  \"dataStore\": [16],\n  \"dragStart\": [64],\n  \"endOrder\": [64],\n  \"clearOrder\": [64]\n}, [[5, \"mouseleave\", \"onMouseOut\"], [5, \"mouseup\", \"onMouseUp\"]]]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"revogr-order-editor\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"revogr-order-editor\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, OrderEditor);\n        }\n        break;\n    }\n  });\n}\ndefineCustomElement();\nexport { OrderEditor as O, defineCustomElement as d };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}